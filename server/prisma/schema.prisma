generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model genres {
  type_id        Int              @id @default(autoincrement())
  label          String           @db.VarChar(50)
  project_genres project_genres[]
}

model job_titles {
  title_id Int       @id @default(autoincrement())
  label    String    @db.VarChar(50)
  jobs     jobs[]
  members  members[]
  users    users[]
}

model jobs {
  project_id   Int
  title_id     Int
  availability jobs_availability
  duration     jobs_duration
  location     jobs_location
  compensation jobs_compensation
  description  String?           @db.VarChar(500)
  created_at   DateTime          @default(now()) @db.Timestamp(0)
  updated_at   DateTime          @default(now()) @db.Timestamp(0)
  projects     projects          @relation(fields: [project_id], references: [project_id], onDelete: Cascade, map: "FK2_project_id")
  job_titles   job_titles        @relation(fields: [title_id], references: [title_id], map: "FK_jobs_job_titles")

  @@id([project_id, title_id])
  @@index([project_id], map: "FK2_project_id")
  @@index([title_id], map: "FK_jobs_job_titles")
}

model majors {
  major_id Int     @id @default(autoincrement())
  label    String  @db.VarChar(100)
  users    users[]
}

model members {
  project_id         Int
  user_id            Int
  title_id           Int
  profile_visibility members_profile_visibility @default(public)
  created_at         DateTime                   @default(now()) @db.Timestamp(0)
  job_titles         job_titles                 @relation(fields: [title_id], references: [title_id], map: "FK_members_job_titles")
  projects           projects                   @relation(fields: [project_id], references: [project_id], onDelete: Cascade, map: "FK_members_projects")
  users              users                      @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "FK_members_users")

  @@id([project_id, user_id])
  @@index([title_id], map: "FK_members_job_titles")
  @@index([user_id], map: "FK_members_users")
}

model project_followings {
  user_id     Int
  project_id  Int
  followed_at DateTime @default(now()) @db.Timestamp(0)
  projects    projects @relation(fields: [project_id], references: [project_id], onDelete: Cascade, map: "FK_project_followings_projects")
  users       users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "FK_project_followings_users")

  @@id([user_id, project_id])
  @@index([project_id], map: "FK_project_followings_projects")
  @@index([user_id], map: "FK_project_followings_users")
}

model project_genres {
  project_id Int
  type_id    Int
  genres     genres   @relation(fields: [type_id], references: [type_id], onDelete: NoAction, map: "FK_project_genres_genres")
  projects   projects @relation(fields: [project_id], references: [project_id], onDelete: Cascade, map: "FK_project_genres_projects")

  @@id([project_id, type_id])
  @@index([type_id], map: "FK_project_genres_genres")
  @@index([project_id], map: "FK_project_genres_projects")
}

model project_images {
  image_id   Int      @id @default(autoincrement())
  image      String   @db.VarChar(100)
  position   Int
  project_id Int
  projects   projects @relation(fields: [project_id], references: [project_id], onDelete: Cascade, map: "FK_project_images_projects")

  @@index([project_id], map: "FK_project_images_projects")
}

model project_socials {
  project_id Int
  website_id Int
  url        String   @db.VarChar(2000)
  projects   projects @relation(fields: [project_id], references: [project_id], onDelete: Cascade, map: "FK_project_socials_projects")
  socials    socials  @relation(fields: [website_id], references: [website_id], map: "FK_project_socials_socials")

  @@id([project_id, website_id])
  @@index([website_id], map: "FK_project_socials_socials")
}

model project_tags {
  project_id Int
  tag_id     Int
  position   Int
  projects   projects @relation(fields: [project_id], references: [project_id], onDelete: Cascade, map: "FK_project_tags_projects")
  tags       tags     @relation(fields: [tag_id], references: [tag_id], onDelete: NoAction, map: "FK_project_tags_tags")

  @@id([project_id, tag_id])
  @@index([project_id], map: "FK_project_tags_projects")
  @@index([tag_id], map: "FK_project_tags_tags")
}

model projects {
  project_id         Int                  @id @default(autoincrement())
  title              String               @db.VarChar(150)
  hook               String               @db.VarChar(200)
  description        String               @db.VarChar(2000)
  thumbnail          String?              @db.VarChar(100)
  purpose            projects_purpose?
  status             projects_status
  audience           String?              @db.VarChar(300)
  user_id            Int?
  created_at         DateTime             @default(now()) @db.Timestamp(0)
  updated_at         DateTime             @default(now()) @db.Timestamp(0)
  jobs               jobs[]
  members            members[]
  project_followings project_followings[]
  project_genres     project_genres[]
  project_images     project_images[]
  project_socials    project_socials[]
  project_tags       project_tags[]
  users              users?               @relation(fields: [user_id], references: [user_id], map: "FK_user_id")

  @@index([user_id], map: "FK_user_id")
}

model skills {
  skill_id    Int           @id @default(autoincrement())
  label       String        @db.VarChar(50)
  type        String        @db.VarChar(50)
  user_skills user_skills[]
}

model socials {
  website_id      Int               @id @default(autoincrement())
  label           String            @db.VarChar(50)
  project_socials project_socials[]
  user_socials    user_socials[]
}

model tags {
  tag_id       Int            @id @default(autoincrement())
  label        String         @db.VarChar(50)
  type         String         @db.VarChar(50)
  project_tags project_tags[]
}

model user_followings {
  user_id                                   Int
  following_id                              Int
  followed_at                               DateTime @default(now()) @db.Timestamp(0)
  users_user_followings_following_idTousers users    @relation("user_followings_following_idTousers", fields: [following_id], references: [user_id], onDelete: Cascade, map: "FK_user_followings_following_user")
  users_user_followings_user_idTousers      users    @relation("user_followings_user_idTousers", fields: [user_id], references: [user_id], onDelete: Cascade, map: "FK_user_followings_users")

  @@id([user_id, following_id])
  @@index([following_id], map: "FK_user_followings_following_user")
  @@index([user_id], map: "FK_user_followings_users")
}

model user_skills {
  user_id  Int
  skill_id Int
  position Int
  skills   skills @relation(fields: [skill_id], references: [skill_id], onDelete: NoAction, map: "FK_user_skills_skills")
  users    users  @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "FK_user_skills_users")

  @@id([user_id, skill_id])
  @@index([skill_id], map: "FK_user_skills_skills")
  @@index([user_id], map: "FK_user_skills_users")
}

model user_socials {
  user_id    Int
  website_id Int
  url        String  @db.VarChar(2000)
  socials    socials @relation(fields: [website_id], references: [website_id], map: "FK_user_socials_socials")
  users      users   @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "FK_user_socials_users")

  @@id([user_id, website_id])
  @@index([website_id], map: "FK_user_socials_socials")
}

model users {
  user_id                                             Int                  @id @default(autoincrement())
  username                                            String               @db.Text
  rit_email                                           String               @db.VarChar(50)
  first_name                                          String               @db.Text
  last_name                                           String               @db.Text
  profile_image                                       String?              @db.VarChar(100)
  headline                                            String?              @db.VarChar(100)
  pronouns                                            String?              @db.Text
  job_title_id                                        Int?
  major_id                                            Int?
  academic_year                                       users_academic_year?
  location                                            String?              @db.VarChar(150)
  fun_fact                                            String?              @db.VarChar(100)
  bio                                                 String?              @db.VarChar(600)
  visibility                                          Int                  @default(1) @db.TinyInt
  created_at                                          DateTime             @default(now()) @db.Timestamp(0)
  updated_at                                          DateTime             @default(now()) @db.Timestamp(0)
  phone_number                                        BigInt?
  univerity_id                                        String?              @db.VarChar(9)
  members                                             members[]
  project_followings                                  project_followings[]
  projects                                            projects[]
  user_followings_user_followings_following_idTousers user_followings[]    @relation("user_followings_following_idTousers")
  user_followings_user_followings_user_idTousers      user_followings[]    @relation("user_followings_user_idTousers")
  user_skills                                         user_skills[]
  user_socials                                        user_socials[]
  job_titles                                          job_titles?          @relation(fields: [job_title_id], references: [title_id], onDelete: Restrict, map: "FK_users_job_titles")
  majors                                              majors?              @relation(fields: [major_id], references: [major_id], onDelete: Restrict, map: "FK_users_majors")

  @@index([job_title_id], map: "FK_users_job_titles")
  @@index([major_id], map: "FK_users_majors")
}

enum jobs_availability {
  Full_time @map("Full-time")
  Part_time @map("Part-time")
  Flexible
}

enum jobs_duration {
  Short_term @map("Short-term")
  Long_term  @map("Long-term")
}

enum members_profile_visibility {
  private
  public
}

enum jobs_location {
  On_site @map("On-site")
  Remote
  Hybrid
}

enum projects_purpose {
  Personal
  Portfolio_Piece @map("Portfolio Piece")
  Academic
  Co_op           @map("Co-op")
}

enum jobs_compensation {
  Unpaid
  Paid
}

enum projects_status {
  Planning
  Development
  Post_Production @map("Post-Production")
  Complete
}

enum users_academic_year {
  st @map("1st")
  nd @map("2nd")
  rd @map("3rd")
  th @map("4th")
}
